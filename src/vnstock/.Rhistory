rmse(arima, test1_df)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmse(forecast$pred, test1_df$close)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmsearima, test1_df$close)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmse(arima, test1_df$close)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmse(forecast$pred, test1_df$close)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmse(test1_df$close, forecast$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
forecast$pred
rmse(test1_df$close, forecast$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
forecast$pred
test1_df$close
rmse(test1_df$close, forecast$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmse(test1_df$close, forecast$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmse(c(1,2,3), c(2,3,4))
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
actual <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6)
predicted <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2)
rmse(actual, predicted)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmsle(test1_df$close, forecast$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmsle(test1_df$close, forecast$pred)
actual <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6)
predicted <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2)
rmsle(actual, predicted)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(-open, -changes, -adjust, -...1, -date, -stock_code, -low, -high)
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(-open, -changes, -adjust, -...1, -date, -stock_code, -low, -high)
date <- stock_df %>% filter(stock_df$date >= as.Date('2022-01-01'))
date <- date$date
all <- lm(close ~ ., data=train1_df)
summary(all)
colors <- c("Real Closing Price" = "blue", "Predicted Closing Price" = "red")
# visualizing the result
test1_df <- test1_df %>% add_predictions(all, var = "pred")
ggplot(test1_df, aes(x = date)) +
geom_line(aes(y = close, color = "Real Closing Price"), size = 0.5) +
geom_line(aes(y = pred, color = "Predicted Closing Price"), size = 0.5) +
labs(x = "Date",
y = "closing prices",
color = "Legend") +
scale_color_manual(values = colors)
rmsle(test1_df$close, test1_df$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(c(date, close))
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(c(date, close))
#train the model on the training set
arima <- auto.arima(train1_df$close)
# model summary
summary(arima)
# forecasting
forecast = predict(arima,length(test1_df$close))
# evaluation
rmsle(test1_df$close, forecast$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(-open, -changes, -adjust, -...1, -date, -stock_code, -low, -high)
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(-open, -changes, -adjust, -...1, -date, -stock_code, -low, -high)
date <- stock_df %>% filter(stock_df$date >= as.Date('2022-01-01'))
date <- date$date
intercept_only <- lm(close ~ 1, data=train1_df)
all <- lm(close ~ ., data=train1_df)
backward <- step(all, direction='backward', scope=formula(all), trace=0)
summary(backward)
library(modelr)
colors <- c("Real Closing Price" = "blue", "Predicted Closing Price" = "red")
# visualizing the result
test1_df <- test1_df %>% add_predictions(backward, var = "pred")
ggplot(test1_df, aes(x = date)) +
geom_line(aes(y = close, color = "Real Closing Price"), size = 0.5) +
geom_line(aes(y = pred, color = "Predicted Closing Price"), size = 0.5) +
labs(x = "Date",
y = "closing prices",
color = "Legend") +
scale_color_manual(values = colors)
rmsle(test1_df$close, test1_df$pred)
#create training and testing period
train1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2021-06-01') &
stock_df$date <= as.Date('2021-12-31')) %>%
select(-open, -changes, -adjust, -...1, -date, -stock_code, -low, -high)
test1_df <- stock_df %>%
filter(stock_df$date >= as.Date('2022-01-01')) %>%
select(-open, -changes, -adjust, -...1, -date, -stock_code, -low, -high)
#create the model
rf = randomForest(close ~ ., data = train1_df)
colors <- c("Real Closing Price" = "blue", "Predicted Closing Price" = "red")
# visualizing the result
test1_df <- test1_df %>% add_predictions(rf, var = "pred")
ggplot(test1_df, aes(x = date)) +
geom_line(aes(y = close, color = "Real Closing Price"), size = 0.5) +
geom_line(aes(y = pred, color = "Predicted Closing Price"), size = 0.5) +
labs(x = "Date",
y = "closing prices",
color = "Legend") +
scale_color_manual(values = colors)
rmsle(test1_df$close, test1_df$pred)
View(student_remove)
shiny::runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
View(student_data)
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
a <- c(1,2,3)
length(a)
b
as.list(predict(arima(),length(test1_df()$close)))
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
shiny::runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
View(ais.lm)
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
library(modelr)
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/test')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/test')
runApp('Desktop/test')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
install.packages("lubridate")
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
lr1 <- reactive({ lm(formula = close ~ ., data = train_per_1()) })
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='vnstock',
token='EC36C742FD3D4DC1C5B02DDBB81D9A83',
secret='<SECRET>')
rsconnect::setAccountInfo(name='vnstock',
token='EC36C742FD3D4DC1C5B02DDBB81D9A83',
secret='KeYKqz8a7pxDgv3PmX6QYzi6TkNOeGAKy9tpcPcg')
shiny::runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
rsconnect::setAccountInfo(name='vnstock',
token='EC36C742FD3D4DC1C5B02DDBB81D9A83',
secret='KeYKqz8a7pxDgv3PmX6QYzi6TkNOeGAKy9tpcPcg')
library(rsconnect)
deployApp()
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
runApp('Desktop/vnstock_analysis/src/vnstock')
deployApp()
deployApp("/Users/hale/Desktop/vnstock_analysis/src")
deployApp(appName = "vnstock", "/Users/hale/Desktop/vnstock_analysis/src")
runApp('Desktop/vnstock_analysis/src/vnstock')
